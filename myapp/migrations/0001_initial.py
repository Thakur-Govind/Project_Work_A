# Generated by Django 2.2.9 on 2020-11-01 08:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mid_name', models.CharField(max_length=100)),
                ('dob', models.DateField(blank=True, null=True)),
                ('pan_no', models.CharField(max_length=20)),
                ('aadhar_no', models.CharField(max_length=16)),
                ('is_farmer', models.BooleanField(default=False)),
                ('is_seller', models.BooleanField(default=False)),
                ('is_consumer', models.BooleanField(default=False)),
                ('state', models.CharField(max_length=30)),
                ('city', models.CharField(max_length=30)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Consumer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='consumer', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('consumer_type', models.CharField(choices=[('Consumer', 'Consumer'), ('Retailer', 'Retailer')], default='Consumer', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Farmer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='farmer', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('farmer_type', models.CharField(choices=[('Food', 'Food'), ('Commercial', 'Commercial'), ('Both', 'Both')], default='Food', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='seller', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('seller_type', models.CharField(choices=[('Pesticide', 'Pesticide'), ('Fertilizer', 'Fertilizer'), ('Seed', 'Seed')], default='Pesticide', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Raw',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('price', models.IntegerField()),
                ('state', models.CharField(max_length=200)),
                ('quantity', models.IntegerField()),
                ('raw_type', models.CharField(choices=[('Seeds', 'Seeds'), ('Pesticides', 'Pesticides'), ('Fertilizers', 'Fertilizers')], default='Seeds', max_length=20)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.Seller')),
            ],
        ),
        migrations.CreateModel(
            name='Crops',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('state', models.CharField(max_length=200)),
                ('price', models.IntegerField()),
                ('quantity', models.IntegerField()),
                ('crop_type', models.CharField(choices=[('Edible', 'Edible'), ('Commercial', 'Commercial')], default='Edible', max_length=20)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.Farmer')),
            ],
        ),
    ]
